import com.android.build.OutputFile
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.github.shadowsocks"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.sdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs rootProject.resConfigs
    }
    signingConfigs {
        config {

            //加载资源
            Properties properties = new Properties()
            InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream() ;
            properties.load( inputStream )

            //读取文件
            def sdkDir = properties.getProperty('key.file')
            storeFile file( sdkDir )

            //读取字段
            def key_keyAlias = properties.getProperty( 'keyAlias' )
            def key_keyPassword = properties.getProperty( 'keyPassword' ) ;
            def key_storePassword = properties.getProperty( 'storePassword' ) ;

            storePassword key_storePassword
            keyAlias key_keyAlias
            keyPassword key_keyPassword
        }
    }
    buildTypes {
        debug {
            pseudoLocalesEnabled true
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    kotlinOptions.jvmTarget = javaVersion
    packagingOptions.exclude '**/*.kotlin_*'
    splits {
        abi {
            enable true
            universalApk true
        }
    }
    sourceSets.main.jniLibs.srcDirs +=
            new File(project(':core').buildDir, "intermediates/bundles/${getCurrentFlavor()}/jni")
}

androidExtensions {
    experimental = true
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarLibsVersion"
    implementation project(':core')
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation 'com.google.android.gms:play-services-vision:19.0.0'
//    implementation 'com.google.firebase:firebase-ads:18.3.0'
    implementation 'com.google.zxing:core:3.4.0'
    implementation 'com.takisoft.preferencex:preferencex-simplemenu:1.1.0'
    implementation 'com.twofortyfouram:android-plugin-api-for-locale:1.0.4'
    implementation 'me.zhanghai.android.fastscroll:library:1.1.0'
    implementation 'xyz.belvi.mobilevision:barcodescanner:2.0.3'
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$androidTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidEspressoVersion"
}
repositories {
    mavenCentral()
}

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
if (getCurrentFlavor() == 'release') android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def offset = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
    }
}
